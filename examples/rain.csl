/*
 * Random number generator with a float seed
 *
 * Credits:
 * http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0
 */
float random1d(float dt) = fract(sin(sn) * c)
{
    float c = 43758.5453;
    float sn = mod(dt, 3.14);
}

/*
 *  Returns a random drop position for the given seed value
 */
vec random_drop_pos(float val, vec screen_dim, vec velocity) = vec(x, y)
{
    float max_x_move = velocity.x * abs(screen_dim.y / velocity.y);
    float x = -max_x_move * step(0, max_x_move) + (screen_dim.x + abs(max_x_move)) * random1d(val);
    float y = (1 + 0.05 * random1d(1.234 * val)) * screen_dim.y;
}

/*
 * Calculates the drop trail color at the given pixel position
 */
vec trail_color(vec pixel, vec pos, vec velocity_dir, float width, float size) = vec(fading_dashed_line)
{
	float PI = 3.14159265;
    vec pixel_dir = pixel - pos;
    float projected_dist = dot(pixel_dir, -velocity_dir);
    float tanjential_dist_sq = dot(pixel_dir, pixel_dir) - pow(projected_dist, 2);
    float width_sq = pow(width, 2);

    float line = step(0, projected_dist) * (1 - smoothstep(width_sq / 2, width_sq, tanjential_dist_sq));
    float dashed_line = line * step(0.5, cos(0.3 * projected_dist - PI / 3));
    float fading_dashed_line = dashed_line * (1 - smoothstep(size / 5, size, projected_dist));
}

/*
 * Calculates the drop wave color at the given pixel position
 */
vec wave_color(vec pixel, vec pos, float size, float time) = vec(fading_ring)
{
    vec pixel_dir = pixel - pos;
    float distorted_dist = ||pixel_dir * vec(1, 3.5)||;

    float inner_radius = (0.05 + 0.8 * time) * size;
    float outer_radius = inner_radius + 0.25 * size;

    float ring = smoothstep(inner_radius, inner_radius + 5, distorted_dist)
            * (1 - smoothstep(outer_radius, outer_radius + 5, distorted_dist));
    float fading_ring = ring * (1 - smoothstep(0, 0.7, time));
}

/*
 * Calculates the background color at the given pixel position
 */
vec background_color(vec pixel, vec screen_dim, float time) 
	= vec(0, 0, 1 - smoothstep(-1, 0.8 + 0.2 * cos(0.5 * time), pixel.y / screen_dim.y))

/*
 * The main program
 */
void main() {
    // Set the total number of rain drops that are visible at a given time
    float n_drops = 20;

    // Set the drop trail radius
    float trail_width = 2;

    // Set the drop trail size
    float trail_size = 70;

    // Set the drop wave size
    float wave_size = 20;

    // Set the drop fall time in seconds
    float fall_time = 0.7;

    // Set the drop total life time
    float life_time = fall_time + 0.5;

    // Set the drop velocity in pixels per second
    vec velocity = vec(iMouse.x - 0.5 * iResolution.x, -0.9 * iResolution.y) / fall_time;
    vec velocity_dir = normalize(velocity);

    // Iterate over the drops to calculate the pixel color
    vec pixel_color = vec(0);

    for (float i = 0; i < n_drops; i += 1) {
        // Offset the running time for each drop
        float time = iTime + life_time * (i + i / n_drops);

        // Calculate the time since the drop appeared on the screen
        float ellapsed_time = mod(time, life_time);

        // Calculate the drop initial position
        vec initial_pos = random_drop_pos(i + floor(time / life_time - i) * n_drops, iResolution.xy, velocity);

        // Add the drop to the pixel color
        if (ellapsed_time < fall_time) {
            // Calculate the drop current position
            vec current_pos = initial_pos + ellapsed_time * velocity;

            // Add the trail color to the pixel color
            pixel_color += trail_color(gl_FragCoord.xy, current_pos, velocity_dir, trail_width, trail_size);
        } else {
            // Calculate the drop final position
            vec final_pos = initial_pos + fall_time * velocity;

            // Add the wave color to the pixel color
            pixel_color += wave_color(gl_FragCoord.xy, final_pos, wave_size, ellapsed_time - fall_time);
        }
    }

    // Add the background color to the pixel color
    pixel_color += background_color(gl_FragCoord.xy, iResolution.xy, iTime);

    // Fragment shader output
	pixel_color.w = 1;
    gl_FragColor = pixel_color;
}
